(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{370:function(t,r,_){t.exports=_.p+"assets/img/Untitled.a64c5981.png"},401:function(t,r,_){"use strict";_.r(r);var v=_(0),s=Object(v.a)({},(function(){var t=this,r=t.$createElement,v=t._self._c||r;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h1",{attrs:{id:"비동기-처리-이해-프로세스와-스레드"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#비동기-처리-이해-프로세스와-스레드"}},[t._v("#")]),t._v(" 비동기 처리 이해 * 프로세스와 스레드")]),t._v(" "),v("h2",{attrs:{id:"⛅-프로세스"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#⛅-프로세스"}},[t._v("#")]),t._v(" ⛅ 프로세스")]),t._v(" "),v("p",[t._v("운영체제로부터 자원을 할당 받는 작업의 단위"),v("br"),t._v("\n어플리케이션 하나가 프로세스, 그 안에서 분기 처리가 스레드.")]),t._v(" "),v("h3",{attrs:{id:"멀티-프로세스"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#멀티-프로세스"}},[t._v("#")]),t._v(" 멀티 프로세스")]),t._v(" "),v("p",[t._v("하나의 "),v("strong",[t._v("프로그램을 여러개의 프로세스로 구성")]),t._v(", 각 프로세스가 하나의 작업을 처리하는 것.")]),t._v(" "),v("ul",[v("li",[t._v("장점 : 하나의 프로세스가 잘못되어도 프로그램은 동작함.")]),t._v(" "),v("li",[t._v("단점 : 💡"),v("strong",[t._v("context switching")]),t._v(" 비용 발생.")])]),t._v(" "),v("blockquote",[v("p",[v("strong",[t._v("💡 context switching")])])]),t._v(" "),v("p",[t._v("cpu에서 여러 프로세스를 돌아가며 작업을 처리하는 과정.")]),t._v(" "),v("ul",[v("li",[v("p",[t._v("다음의 과정을 말한다."),v("br"),t._v("\n⇒ 멀티프로세스환경에서 cpu가 어떤 하나의 프로세스를 실행하고 있다."),v("br"),t._v("\n⇒ 이때 인터럽트 요청에 의해 다음 우선순위의 프로세스가 실행되어야 한다."),v("br"),t._v("\n⇒ 기존 실행중이던 프로세스의 상태를 저장한다."),v("br"),t._v("\n⇒ 그리고 cpu가 다음 프로세스를 수행하도록 세로운 프로세스의 상태를 교체한다.")])]),t._v(" "),v("li",[v("p",[t._v("동작중인 프로세스가 자신의 상태(context)를 보관하며 대기하고 있다가 다시 실행시 복구하는 비용(시간)을 말한다.")])])]),t._v(" "),v("h2",{attrs:{id:"⛅-스레드"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#⛅-스레드"}},[t._v("#")]),t._v(" ⛅ 스레드")]),t._v(" "),v("p",[t._v("할당 받은 자원을 이용하는 실행의 단위"),v("br"),t._v("\n프로세스 내 여러개 존재 가능")]),t._v(" "),v("h3",{attrs:{id:"멀티-스레드"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#멀티-스레드"}},[t._v("#")]),t._v(" 멀티 스레드")]),t._v(" "),v("p",[t._v("하나의 프로그램을 "),v("strong",[t._v("여러개의 스레드로 구성")]),t._v("하고 각 스레드가 작업을 처리하는 것.")]),t._v(" "),v("p",[t._v("프로세스와 다르게 스레드간 자원을 공유하고 있다는 사실을 명심한다.")]),t._v(" "),v("ul",[v("li",[t._v("장점 : 시스템 자원 소모 감소, 처리 비용 감소(실행 속도 향상), 스레드간 자원 공유(stack영역)")]),t._v(" "),v("li",[t._v("단점 : 디버깅 어려움, 동기화 이슈 발생, 하나의 스레드의 오류→ 전체 프로세스에 문제 발생")])]),t._v(" "),v("blockquote",[v("p",[v("strong",[t._v("💡 Thread Safe")])])]),t._v(" "),v("p",[t._v("여러 스레드가 동시에 사용되어도 안전하다는 것을 의미.")]),t._v(" "),v("p",[t._v("특정 함수 a와 변수 b가 여러 스레드에서 호출되어도 하나의 스레드에서 호출했을 때와 같은 결과가 보장되어야 한다는 의미.")]),t._v(" "),v("p",[t._v("함수가 전역변수를 참조하게 된다면 그 함수는 thread safe하지 않은 결과가 나올 수도 있다.")]),t._v(" "),v("h2",{attrs:{id:"⛅-비동기-처리"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#⛅-비동기-처리"}},[t._v("#")]),t._v(" ⛅ 비동기 처리")]),t._v(" "),v("h3",{attrs:{id:"등장-배경"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#등장-배경"}},[t._v("#")]),t._v(" 등장 배경")]),t._v(" "),v("p",[t._v("대부분의 기업형 애플리케이션은 중앙 서버에서 동작하며, 서버는 "),v("strong",[t._v("중앙집중형태")]),t._v("로 클라이언트의 요청을 받는다. ⇒ "),v("strong",[t._v("병목현상")]),t._v(" 발생 가능성 높음")]),t._v(" "),v("p",[t._v("대부분의 병목 구간은 "),v("strong",[t._v("입출력(IO)에서 발생")]),t._v("하며**,** 이러한 문제를 해결하기 위해 "),v("strong",[t._v("사용자의 요청을 스레드로 처리")]),t._v("한다.")]),t._v(" "),v("h3",{attrs:{id:"멀티-스레드의-한계"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#멀티-스레드의-한계"}},[t._v("#")]),t._v(" 멀티 스레드의 한계")]),t._v(" "),v("p",[t._v("멀티 스레드 기반 서버는 일반적으로 "),v("strong",[t._v("클라이언트의 요청마다 스레드를 발생")]),t._v("시킨다.")]),t._v(" "),v("p",[t._v("⇒ 동접자수가 많을 수록 스레드가 많이 발생함\n⇒ 메모리 자원 소모 多 but 서버 자원은 한정되어있음\n⇒ 일정 수 이상의 스레드는 발생시킬 수 없음!!")]),t._v(" "),v("p",[t._v("이러한 근본적인 문제를 안고 있기 때문에 서버를 업그레이드하거나 로드밸런싱등으로 "),v("strong",[t._v("분산처리")]),t._v("를 한다.")]),t._v(" "),v("p",[t._v("결론적으로 멀티 스레드는 개발자입장에선 직관적이지만, 네트워크에서 동시에 대규모 요청을 처리하는 데는 부적절하다. 이 부분을 극복하기 위해선 비동기 프로그래밍을 사용해야 한다.")]),t._v(" "),v("h3",{attrs:{id:"병렬처리의-대안-비동기-처리"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#병렬처리의-대안-비동기-처리"}},[t._v("#")]),t._v(" 병렬처리의 대안 : 비동기 처리")]),t._v(" "),v("p",[v("img",{attrs:{src:_(370),alt:"../.vuepress/public/images/ETC/process_and_thread/Untitled.png"}})]),t._v(" "),v("p",[v("strong",[t._v("동기방식")]),t._v("은 하나의 요청이 처리되는 동안 다른 요청이 처리되지 못한다. 따라서 요청이 완료되어야 다음 요청으로 넘어갈 수 있다. 동기방식은 IO처리를 💡Blocking하는데 지금까지는 이 문제를 스레드로 처리했다.")]),t._v(" "),v("p",[t._v("비동기방식은 하나의 요청 처리가 완료되기전에 제어권을 다음 요청으로 넘긴다. 따라서 IO처리인 경우 Blocking되지 않으며 다음 요청을 처리할 수 있는 것 이다.")]),t._v(" "),v("blockquote",[v("p",[t._v("💡 "),v("strong",[t._v("Blocking I/O")])])]),t._v(" "),v("p",[t._v("웹 앱이 브라우저에서 특정 코드를 실행하느라 브라우저에게 제어권을 돌려주지 않으면 브라우저는 마치 정지된 것처럼 보일 수 있습니다. 이러한 현상을 blocking 이라고 부릅니다. "),v("strong",[v("a",{attrs:{href:"https://developer.mozilla.org/ko/docs/Learn/JavaScript/Asynchronous/Concepts",target:"_blank",rel:"noopener noreferrer"}},[t._v("출처"),v("OutboundLink")],1)])]),t._v(" "),v("p",[t._v("하나의 프로세스가 어떤 자원을 사용하고자 할 때 그 자원을 다른 프로세스가 점유하고 있다면, 그 프로세스가 그 자원의 사용을 끝마칠 때까지 기다려야 한다는 것.")]),t._v(" "),v("h2",{attrs:{id:"⛅-자바스크립트는-싱글-스레드-기반이다"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#⛅-자바스크립트는-싱글-스레드-기반이다"}},[t._v("#")]),t._v(" ⛅ 자바스크립트는 싱글 스레드 기반이다.")]),t._v(" "),v("p",[v("strong",[t._v("싱글 스레드")]),t._v(" 기반이며 "),v("strong",[t._v("이벤트 기반의 비동기 방식")]),t._v("으로 요청을 처리한다.")]),t._v(" "),v("p",[t._v("따라서 요청을 처리하며 다음 요청을 받을 수 있다. 응답을 기다리지 않고 바로 다음 작업을 실행한다는 것이다. 또한 병렬처리를 스레드로 처리하지 않고 "),v("strong",[t._v("이벤트 기반 비동기로 처리")]),t._v("하므로 멀티스레드가 갖는 근본적인 문제에서 자유롭다.")]),t._v(" "),v("p",[v("em",[t._v("+Node.js ⇒ 싱글 쓰레드만 사용하는 것이 아니라 내부적으로 멀티 쓰레드 풀을 사용하기는 한다.")])]),t._v(" "),v("h3",{attrs:{id:"참고"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#참고"}},[t._v("#")]),t._v(" 참고")]),t._v(" "),v("hr"),t._v(" "),v("p",[v("a",{attrs:{href:"https://www.nextree.co.kr/p7292/",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://www.nextree.co.kr/p7292/"),v("OutboundLink")],1),v("br"),t._v(" "),v("a",{attrs:{href:"https://edu.goorm.io/learn/lecture/557/%ED%95%9C-%EB%88%88%EC%97%90-%EB%81%9D%EB%82%B4%EB%8A%94-node-js/lesson/21763/%EC%9D%B4%EB%B2%A4%ED%8A%B8-%EA%B8%B0%EB%B0%98-%EB%B9%84%EB%8F%99%EA%B8%B0-%EB%B0%A9%EC%8B%9D",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://edu.goorm.io/learn/lecture/557/한-눈에-끝내는-node-js/lesson/21763/이벤트-기반-비동기-방식"),v("OutboundLink")],1)])])}),[],!1,null,null,null);r.default=s.exports}}]);