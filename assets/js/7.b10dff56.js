(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{368:function(t,_,v){t.exports=v.p+"assets/img/Untitled.416367f2.png"},369:function(t,_,v){t.exports=v.p+"assets/img/Untitled1.966170b3.png"},403:function(t,_,v){"use strict";v.r(_);var e=v(0),r=Object(e.a)({},(function(){var t=this,_=t.$createElement,e=t._self._c||_;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"rdbs-무결성-integrity-과-키"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#rdbs-무결성-integrity-과-키"}},[t._v("#")]),t._v(" RDBS - 무결성 (Integrity)과 키")]),t._v(" "),e("p",[t._v("학부생, 자격증 시험볼때 무작정 외웠던 것들을 되돌아보기")]),t._v(" "),e("h2",{attrs:{id:"⚡-데이터의-무결성이란"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#⚡-데이터의-무결성이란"}},[t._v("#")]),t._v(" ⚡ 데이터의 무결성이란")]),t._v(" "),e("p",[t._v("데이터의 "),e("code",[t._v("정확성")]),t._v(" "),e("code",[t._v("일관성")]),t._v(" "),e("code",[t._v("유효성")]),t._v(" 이 유지되는 것을 말한다.")]),t._v(" "),e("p",[t._v("데이터의 무결성을 유지하는 것은 DBMS의 중요한 기능이며, 데이터에 적용되는 연산에 제한을 두어 데이터의 무결성을 유지한다.")]),t._v(" "),e("h2",{attrs:{id:"_1-개체-무결성-entity-integrity"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-개체-무결성-entity-integrity"}},[t._v("#")]),t._v(" 1. 개체 무결성 (Entity integrity)")]),t._v(" "),e("p",[t._v("모든 테이블이 기본키(pk)로 선택된 필드를 가져야 한다. 기본 키로 선택된 필드는 고유한 값을 가져야 하며, 빈 값은 허용하지 않는다.")]),t._v(" "),e("h2",{attrs:{id:"_2-참조-무결성-referential-integrity"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-참조-무결성-referential-integrity"}},[t._v("#")]),t._v(" 2. 참조 무결성 (Referential integrity)")]),t._v(" "),e("p",[t._v("참조 관계에 있는 두 테이블의 데이터가 항상 일관된 값을 갖도록 유지되는 것.")]),t._v(" "),e("p",[t._v("다음 그림은 참조 무결성이 깨지는 경우를 보여준다.")]),t._v(" "),e("p",[e("code",[t._v("department")]),t._v(" 테이블의 id=310인 레코드를 삭제 시, "),e("code",[t._v("student")]),t._v(" 테이블에서 id=3 레코드는 dept_id가 삭제된 310을 참조하고 있었기 때문에 존재하지 않는 데이터를 참조하게 된다.")]),t._v(" "),e("p",[e("img",{attrs:{src:v(368),alt:"../.vuepress/public/images/DB/rdbs-Integrity-key/Untitled.png"}})]),t._v(" "),e("h2",{attrs:{id:"_3-도메인-무결성-domain-integrity"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-도메인-무결성-domain-integrity"}},[t._v("#")]),t._v(" 3. 도메인 무결성 (Domain integrity)")]),t._v(" "),e("p",[t._v("테이블에 존재하는 필드의 무결성을 보장하기 위한 것.")]),t._v(" "),e("p",[t._v("필드의 타입, NULL값의 허용 등에 대한 사항을 정의하고 올바른 데이터가 입력됐는지 확인하는 것.")]),t._v(" "),e("p",[t._v("(ex) 도메인 무결성이 깨지는 경우 : 주민등록번호 필드에 알파벳이 입력되는 경우")]),t._v(" "),e("p",[t._v("DBMS의 기본값 설정, NOT NULL 옵션 등의 제약 사항으로 도메인 무결성을 보장할 수 있다.")]),t._v(" "),e("h2",{attrs:{id:"_4-무결성-규칙-integrity-rule"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-무결성-규칙-integrity-rule"}},[t._v("#")]),t._v(" 4. 무결성 규칙 (Integrity rule)")]),t._v(" "),e("p",[t._v("데이터의 무결성을 지키기 위한 모든 제약사항들을 말한다.")]),t._v(" "),e("p",[t._v("비즈니스 규칙은 DB 이용 유저에 따라 서로 다르게 적용되지만, 무결성 규칙은 DB전체에 공통적으로 적용되는 규칙이다.")]),t._v(" "),e("h2",{attrs:{id:"🔑-키의-종류와-기능"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#🔑-키의-종류와-기능"}},[t._v("#")]),t._v(" 🔑 키의 종류와 기능")]),t._v(" "),e("p",[t._v("다양한 종류의 키들은 db에서 데이터의 무결성을 유지하기 위한 중요한 수단으로 이용되고 있다.")]),t._v(" "),e("ul",[e("li",[t._v("유일성 : 모든 레코드에서 해당 필드에 중복된 값이 나타나지 않는 속성.")]),t._v(" "),e("li",[t._v("최소성 : 최소한의 필드로 레코드를 유일하게 구별할 수 있는 속성.")])]),t._v(" "),e("h2",{attrs:{id:"_1-슈퍼-키-super-key"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-슈퍼-키-super-key"}},[t._v("#")]),t._v(" 1. 슈퍼 키 (Super Key)")]),t._v(" "),e("p",[t._v("슈퍼키는 테이블에 존재하는 필드들의 부분집합이며 "),e("code",[t._v("유일성")]),t._v("을 만족해야 한다.")]),t._v(" "),e("p",[t._v("슈퍼 키 중에서 "),e("code",[t._v("최소성")]),t._v(" 을 만족하는 키 = 후보키")]),t._v(" "),e("h2",{attrs:{id:"_2-후보-키-candidate-key"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-후보-키-candidate-key"}},[t._v("#")]),t._v(" 2. 후보 키 (Candidate key)")]),t._v(" "),e("p",[t._v("기본 키가 될 수 있는 키.")]),t._v(" "),e("p",[t._v("테이블에 존재하는 전체 필드의 부분집합으로, "),e("code",[t._v("유일성")]),t._v("과 "),e("code",[t._v("최소성")]),t._v("을 만족해야한다.")]),t._v(" "),e("ul",[e("li",[t._v("후보키 탈락 예시\n"),e("ul",[e("li",[t._v("{ id, dept_id } ⇒ 최소성 만족 x (id만으로 레코드 구별 가능)")]),t._v(" "),e("li",[t._v("{ dept_id } ⇒ 유일성 만족x")])])])]),t._v(" "),e("h2",{attrs:{id:"_3-기본-키-primary-key"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-기본-키-primary-key"}},[t._v("#")]),t._v(" 3. 기본 키 (Primary key)")]),t._v(" "),e("p",[t._v("테이블에서 특정 레코드를 구별하기 위해 후보 키 중에서 선택 된 고유한 식별자.")]),t._v(" "),e("p",[e("code",[t._v("유일성")]),t._v(" "),e("code",[t._v("최소성")]),t._v(" "),e("code",[t._v("NULL 값 불가")]),t._v(" 만족해야 한다.")]),t._v(" "),e("ul",[e("li",[t._v("기본키 선택 시 고려할 사항\n"),e("ul",[e("li",[e("strong",[t._v("값이 자주 변경되지 않는 것 선택")]),t._v(" : 값이 변경될 때 마다 해당 값이 유일한지, NULL 값은 아닌지 검사해야하기 때문에 자주 변경되지 않는 필드를 기본키로 설정하는 것이 좋다.")]),t._v(" "),e("li",[e("strong",[t._v("값이 단순한 것을 선택 :")]),t._v(" 많은 자릿수를 갖거나 많은 문자를 포함한다면 기본 키 비교시 그만큼 많은 비용이 소모될 것이므로 짧고 단순한 형식의 데이터를 저장하는 필드를 설정하자!")])])])]),t._v(" "),e("h2",{attrs:{id:"_4-대체-키-alternate-key"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-대체-키-alternate-key"}},[t._v("#")]),t._v(" 4. 대체 키 (Alternate key)")]),t._v(" "),e("p",[t._v("후보키 중에서 기본키로 선택된 것들을 제외한 모든 키")]),t._v(" "),e("h2",{attrs:{id:"_5-복합-키-composite-key"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-복합-키-composite-key"}},[t._v("#")]),t._v(" 5. 복합 키 (Composite key)")]),t._v(" "),e("p",[t._v("한개 이상의 필드를 포함하는 키.")]),t._v(" "),e("h2",{attrs:{id:"_6-외래-키-foreign-key"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6-외래-키-foreign-key"}},[t._v("#")]),t._v(" 6. 외래 키 (Foreign key)")]),t._v(" "),e("p",[t._v("한 테이블의 키 중에서 다른 테이블의 레코드를 유일하게 식별할 수 있는 키.")]),t._v(" "),e("p",[t._v("한 테이블의 레코드에서 다른 테이블의 레코드를 참조하기 위해 이용된다.")]),t._v(" "),e("p",[t._v("아래 이미지에서 "),e("code",[t._v("order")]),t._v(" 테이블의 "),e("code",[t._v("product_id")]),t._v(" 는 "),e("code",[t._v("product")]),t._v(" 테이블의 "),e("code",[t._v("product_id")]),t._v(" 를 통해 해당 레코드를 참조하기 위해 설정 된 외래키이다.")]),t._v(" "),e("p",[e("img",{attrs:{src:v(369),alt:"../.vuepress/public/images/DB/rdbs-Integrity-key/Untitled1.png"}})]),t._v(" "),e("p",[t._v("외래키는 다음과 같은 속성(제약 조건)을 통해 참조 무결성과 관련된 문제가 발생하지 않도록 한다.")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("속성")]),t._v(" "),e("ol",[e("li",[t._v("하나의 필드 또는 전체 필드의 부분집합으로 구성된다.")]),t._v(" "),e("li",[t._v("중복된 값과 NULL 값을 가질 수 "),e("code",[t._v("있다")])]),t._v(" "),e("li",[t._v("반드시 "),e("code",[t._v("참조되는 테이블에서 유일한 값을 갖는 필드")]),t._v(" 를 참조해야 한다.(EX) 참조할 테이블의 기본키")]),t._v(" "),e("li",[t._v("참조할 테이블에 존재하는 값 만을 가져야 한다. NULL값은 실제로 존재하는 값은 아니지만, 많은 DB에서 NULL값은 예외로 한다.")])])])]),t._v(" "),e("h2",{attrs:{id:"외래-키와-참조-무결성"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#외래-키와-참조-무결성"}},[t._v("#")]),t._v(" 외래 키와 참조 무결성")]),t._v(" "),e("p",[t._v("DB에서 참조 무결성을 위해 참조 대상이 존재하지 않는 외래 키를 허용하지 않는다.")]),t._v(" "),e("p",[t._v("어떤 외래키 "),e("code",[t._v("B")]),t._v(" 가 "),e("code",[t._v("A")]),t._v("를 참조한다면, "),e("code",[t._v("A")]),t._v(" 는 반드시 db에 존재해야 한다.")]),t._v(" "),e("p",[t._v("외래키는 참조 무결성을 지키기 위해 "),e("code",[t._v("RESTRICTED")]),t._v(" "),e("code",[t._v("CASCADE")]),t._v(" "),e("code",[t._v("SET NULL")]),t._v(" 이라는 개념을 외래 키에 적용할 수 있도록 기능을 제공한다.")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("RESTRICTED")]),t._v("  : 레코드를 변경/삭제 시, 해당 레코드를 참조하고 있는 개체가 있다면 변경/삭제 "),e("strong",[t._v("연산을 취소")])]),t._v(" "),e("li",[e("code",[t._v("CASCADE")]),t._v(" : 레코드를 변경/삭제 시, 해당 레코드를 "),e("strong",[t._v("참조하고 있는 개체도 변경/삭제")])]),t._v(" "),e("li",[e("code",[t._v("SET NULL")]),t._v(" : 레코드 변경/삭제 시, 해당 레코드를 "),e("strong",[t._v("참조하고 있는 개체의 값을 NULL로 설정")])])]),t._v(" "),e("h3",{attrs:{id:"참고"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#참고"}},[t._v("#")]),t._v(" 참고")]),t._v(" "),e("hr"),t._v(" "),e("p",[e("a",{attrs:{href:"https://untitledtblog.tistory.com/123",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://untitledtblog.tistory.com/123"),e("OutboundLink")],1)])])}),[],!1,null,null,null);_.default=r.exports}}]);